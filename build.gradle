buildscript {
    ext {
        kotlinVersion = '1.3.11'
        kotlinCoroutinesVersion = '1.0.1'

        springBootVersion = '2.1.0.RELEASE'

        vavrVersion = '0.9.2'
        arrowVersion = "0.8.1"
        funktionaleVersion = '1.2'
        cyclopsVersion = '10.0.4'
    }
    repositories {
        maven {
            name 'Ali Repo'
            url 'https://maven.aliyun.com/nexus/content/groups/public/'
        }
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath("org.jetbrains.kotlin:kotlin-gradle-plugin:${kotlinVersion}")
        classpath("org.jetbrains.kotlin:kotlin-allopen:${kotlinVersion}")
    }
}

// https://github.com/ben-manes/gradle-versions-plugin
plugins {
    id "com.github.ben-manes.versions" version "0.20.0"
}

subprojects {
    apply plugin: 'kotlin'
    apply plugin: 'kotlin-spring'
    apply plugin: 'io.spring.dependency-management'
    apply plugin: 'eclipse'

    group = 'com.example.practice.java.modern.tech.sandbox'
    version = '0.0.1-SNAPSHOT'

    sourceCompatibility = 1.8
    compileKotlin {
        kotlinOptions {
            freeCompilerArgs = ["-Xjsr305=strict"]
            jvmTarget = "1.8"
        }
    }
    compileTestKotlin {
        kotlinOptions {
            freeCompilerArgs = ["-Xjsr305=strict"]
            jvmTarget = "1.8"
        }
    }

    repositories {
        maven {
            name 'Ali Repo'
            url 'https://maven.aliyun.com/nexus/content/groups/public/'
        }
        mavenCentral()
    }

    dependencies {
        implementation 'org.springframework.boot:spring-boot-starter'
        implementation 'org.springframework.boot:spring-boot-starter-data-redis'
        implementation 'org.springframework.boot:spring-boot-starter-data-redis-reactive'

        implementation 'com.fasterxml.jackson.module:jackson-module-kotlin'
        implementation "org.jetbrains.kotlin:kotlin-stdlib:${kotlinVersion}"
        implementation "org.jetbrains.kotlin:kotlin-stdlib-common:${kotlinVersion}"
        implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:${kotlinVersion}"
        implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:${kotlinVersion}"
        implementation "org.jetbrains.kotlin:kotlin-reflect:${kotlinVersion}"

        /*
         * modern libs: Reactive/Kotlin Coroutines
         */
        implementation 'io.reactivex.rxjava2:rxjava'
        implementation 'io.reactivex.rxjava2:rxkotlin:2.3.0'
        // https://github.com/Kotlin/kotlinx.coroutines
        implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:${kotlinCoroutinesVersion}"
        // kotlinx.coroutines integration
        implementation "org.jetbrains.kotlinx:kotlinx-coroutines-jdk8:${kotlinCoroutinesVersion}"
        implementation "org.jetbrains.kotlinx:kotlinx-coroutines-rx2:${kotlinCoroutinesVersion}"
        implementation "org.jetbrains.kotlinx:kotlinx-coroutines-reactor:${kotlinCoroutinesVersion}"

        /*
         * FP libs
         */
        implementation "io.vavr:vavr:${vavrVersion}"
        implementation "io.vavr:vavr-kotlin:${vavrVersion}"
        annotationProcessor "io.vavr:vavr-match:${vavrVersion}"
        testAnnotationProcessor "io.vavr:vavr-match:${vavrVersion}"

        // cyclops
        implementation "com.oath.cyclops:cyclops:${cyclopsVersion}"
        // cyclops integrations
        implementation "com.oath.cyclops:cyclops-futurestream:${cyclopsVersion}"
        implementation "com.oath.cyclops:cyclops-rx2-integration:${cyclopsVersion}"
        implementation "com.oath.cyclops:cyclops-reactor-integration:${cyclopsVersion}"
        implementation "com.oath.cyclops:cyclops-reactive-collections:${cyclopsVersion}"
        implementation "com.oath.cyclops:cyclops-pure:${cyclopsVersion}"
        implementation "com.oath.cyclops:cyclops-anym:${cyclopsVersion}"
        implementation "com.oath.cyclops:cyclops-jackson-integration:${cyclopsVersion}"

        implementation 'com.google.guava:guava:27.0.1-jre'
        implementation 'org.functionaljava:functionaljava:4.8.1'
        implementation 'org.jooq:jool-java-8:0.9.14'

        // kotlin libs
        implementation "io.arrow-kt:arrow-core:$arrowVersion"
        implementation "io.arrow-kt:arrow-syntax:$arrowVersion"
        implementation "io.arrow-kt:arrow-typeclasses:$arrowVersion"
        implementation "io.arrow-kt:arrow-data:$arrowVersion"
        implementation "io.arrow-kt:arrow-instances-core:$arrowVersion"
        implementation "io.arrow-kt:arrow-instances-data:$arrowVersion"
        kapt           "io.arrow-kt:arrow-annotations-processor:$arrowVersion"
        implementation "io.arrow-kt:arrow-free:$arrowVersion" //optional
        implementation "io.arrow-kt:arrow-instances-free:$arrowVersion" //optional
        implementation "io.arrow-kt:arrow-mtl:$arrowVersion" //optional
        implementation "io.arrow-kt:arrow-effects:$arrowVersion" //optional
        implementation "io.arrow-kt:arrow-effects-instances:$arrowVersion" //optional
        implementation "io.arrow-kt:arrow-effects-rx2:$arrowVersion" //optional
        implementation "io.arrow-kt:arrow-effects-rx2-instances:$arrowVersion" //optional
        implementation "io.arrow-kt:arrow-effects-reactor:$arrowVersion" //optional
        implementation "io.arrow-kt:arrow-effects-reactor-instances:$arrowVersion" //optional
        implementation "io.arrow-kt:arrow-effects-kotlinx-coroutines:$arrowVersion" //optional
        implementation "io.arrow-kt:arrow-effects-kotlinx-coroutines-instances:$arrowVersion" //optional
        implementation "io.arrow-kt:arrow-optics:$arrowVersion" //optional
        implementation "io.arrow-kt:arrow-generic:$arrowVersion" //optional
        implementation "io.arrow-kt:arrow-recursion:$arrowVersion" //optional
        implementation "io.arrow-kt:arrow-instances-recursion:$arrowVersion" //optional
        implementation "io.arrow-kt:arrow-integration-retrofit-adapter:$arrowVersion" //optional
        // funktionale
        // high-order function-ish
        implementation "org.funktionale:funktionale-composition:${funktionaleVersion}"
        implementation "org.funktionale:funktionale-currying:${funktionaleVersion}"
        implementation "org.funktionale:funktionale-partials:${funktionaleVersion}"
        implementation "org.funktionale:funktionale-pipe:${funktionaleVersion}"
        implementation "org.funktionale:funktionale-memoization:${funktionaleVersion}"
        implementation "org.funktionale:funktionale-reverse:${funktionaleVersion}"
        implementation "org.funktionale:funktionale-complement:${funktionaleVersion}"
        implementation "org.funktionale:funktionale-pairing:${funktionaleVersion}"
        implementation "org.funktionale:funktionale-utils:${funktionaleVersion}"
        // data container type/monad-ish
        implementation "org.funktionale:funktionale-either:${funktionaleVersion}"
        implementation "org.funktionale:funktionale-option:${funktionaleVersion}"
        implementation "org.funktionale:funktionale-try:${funktionaleVersion}"
        implementation "org.funktionale:funktionale-validation:${funktionaleVersion}"
        implementation "org.funktionale:funktionale-state:${funktionaleVersion}"
        // collection extension
        implementation "org.funktionale:funktionale-collections:${funktionaleVersion}"

        // functional data structure
        implementation 'org.organicdesign:Paguro:3.1.0'
        implementation 'org.pcollections:pcollections:3.0.3'
        implementation 'com.github.andrewoma.dexx:collection:0.7'

        /*
         * test libs
         */
        testImplementation 'org.springframework.boot:spring-boot-starter-test'
        testImplementation 'io.projectreactor:reactor-test'
        testImplementation "io.vavr:vavr-test:${vavrVersion}"
    }

    // Overriding deprecated dependencies:
    //      kotlin-stdlib-jre7 -> kotlin-stdlib-jdk7
    //      kotlin-stdlib-jre8 -> kotlin-stdlib-jdk8
    // how to, see: https://dzone.com/articles/gradle-overruling-third-party
    configurations.all {
        resolutionStrategy.eachDependency { DependencyResolveDetails details ->
            def requested = details.requested
            if (requested.group == 'org.jetbrains.kotlin' && requested.name == 'kotlin-stdlib-jre8') {
                details.useTarget("${requested.group}:kotlin-stdlib-jdk8:${requested.version}")
            } else if (requested.group == 'org.jetbrains.kotlin' && requested.name == 'kotlin-stdlib-jre7') {
                details.useTarget("${requested.group}:kotlin-stdlib-jdk7:${requested.version}")
            }
        }
    }
}
